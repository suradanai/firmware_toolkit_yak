"""
Patch utilities for per-segment rootfs modifications.

Features:
- Patch root password in /etc/shadow
- Enable/disable (rudimentary) telnet / ftp services
- Ensure serial shell (getty) line in /etc/inittab
- Simple service script creation if inetd.conf absent
- Safety: makes a backup copy of each modified file (.bak once)

NOTE:
These patches assume a BusyBox style environment.
Adjust for target firmware specifics if needed.
"""

import os, shutil, stat
from passlib.hash import sha512_crypt

class PatchError(Exception):
    pass

def _safe_backup(path):
    if os.path.isfile(path) and not os.path.isfile(path + ".bak"):
        try:
            shutil.copy2(path, path + ".bak")
        except Exception:
            pass

def patch_root_password(rootfs_dir, new_password: str):
    shadow = os.path.join(rootfs_dir, "etc", "shadow")
    if not os.path.isfile(shadow):
        raise PatchError("ไม่พบไฟล์ shadow")
    _safe_backup(shadow)

    if new_password == "":
        new_hash = "!"
    else:
        # rounds can be tuned
        new_hash = sha512_crypt.hash(new_password, rounds=5000)

    lines = []
    found = False
    with open(shadow, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            if line.startswith("root:"):
                parts = line.rstrip("\n").split(":")
                if len(parts) < 2:
                    raise PatchError("รูปแบบบรรทัด root ใน shadow ผิดปกติ")
                parts[1] = new_hash
                line = ":".join(parts) + "\n"
                found = True
            lines.append(line)
    if not found:
        raise PatchError("ไม่พบ user root ใน shadow")

    with open(shadow, "w", encoding="utf-8") as f:
        f.writelines(lines)
    return True

def ensure_serial_shell(rootfs_dir, device="ttyS0"):
    inittab = os.path.join(rootfs_dir, "etc", "inittab")
    line_template = f"{device}::respawn:/sbin/getty -L {device} 115200 vt100\n"
    if not os.path.isfile(inittab):
        # Create minimal inittab
        os.makedirs(os.path.dirname(inittab), exist_ok=True)
        with open(inittab, "w", encoding="utf-8") as f:
            f.write("# Generated by patch_utils\n")
            f.write(line_template)
        return True

    with open(inittab, "r", encoding="utf-8", errors="ignore") as f:
        content = f.read()
    if device in content and "getty" in content:
        return False  # already present
    _safe_backup(inittab)
    with open(inittab, "a", encoding="utf-8") as f:
        f.write(line_template)
    return True

def enable_telnet(rootfs_dir):
    """
    Try to enable telnet via /etc/inetd.conf if present, otherwise create init script.
    """
    etc_dir = os.path.join(rootfs_dir, "etc")
    inetd = os.path.join(etc_dir, "inetd.conf")
    # line variants
    candidates = [
        "telnet stream tcp nowait root /bin/busybox busybox telnetd",
        "telnet stream tcp nowait root /usr/sbin/telnetd telnetd"
    ]
    os.makedirs(etc_dir, exist_ok=True)
    if os.path.isfile(inetd):
        with open(inetd, "r", encoding="utf-8", errors="ignore") as f:
            txt = f.read()
        if "telnet" in txt:
            return False
        _safe_backup(inetd)
        with open(inetd, "a", encoding="utf-8") as f:
            f.write("\n# Added by patch_utils\n" + candidates[0] + "\n")
        return True
    # fallback: create simple rc script
    initd = os.path.join(rootfs_dir, "etc", "init.d")
    os.makedirs(initd, exist_ok=True)
    script = os.path.join(initd, "S90telnet")
    if not os.path.exists(script):
        with open(script, "w", encoding="utf-8") as f:
            f.write("#!/bin/sh\n")
            f.write("# Auto-added telnet start script\n")
            f.write("echo 'Starting telnetd'\n")
            f.write("(/bin/busybox telnetd || /usr/sbin/telnetd) &\n")
        os.chmod(script, os.stat(script).st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
        return True
    return False

def enable_ftp(rootfs_dir):
    """
    Rudimentary attempt. If inetd.conf exists append; else create script.
    """
    etc_dir = os.path.join(rootfs_dir, "etc")
    inetd = os.path.join(etc_dir, "inetd.conf")
    candidates = [
        "ftp stream tcp nowait root /bin/busybox busybox ftpd -w /",
        "ftp stream tcp nowait root /usr/sbin/ftpd ftpd -w /"
    ]
    os.makedirs(etc_dir, exist_ok=True)
    if os.path.isfile(inetd):
        with open(inetd, "r", encoding="utf-8", errors="ignore") as f:
            txt = f.read()
        if "ftp " in txt or "ftp\t" in txt:
            return False
        _safe_backup(inetd)
        with open(inetd, "a", encoding="utf-8") as f:
            f.write("\n# Added by patch_utils\n" + candidates[0] + "\n")
        return True
    initd = os.path.join(rootfs_dir, "etc", "init.d")
    os.makedirs(initd, exist_ok=True)
    script = os.path.join(initd, "S91ftp")
    if not os.path.exists(script):
        with open(script, "w", encoding="utf-8") as f:
            f.write("#!/bin/sh\n")
            f.write("# Auto-added FTP start script\n")
            f.write("echo 'Starting ftpd'\n")
            f.write("(/bin/busybox ftpd -w / || /usr/sbin/ftpd -w /) &\n")
        os.chmod(script, os.stat(script).st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
        return True
    return False

def patch_services(rootfs_dir, ensure_serial=True, enable_telnet_flag=False, enable_ftp_flag=False,
                   serial_device="ttyS0"):
    actions = []
    if ensure_serial:
        if ensure_serial_shell(rootfs_dir, serial_device):
            actions.append("serial_shell_added")
    if enable_telnet_flag:
        if enable_telnet(rootfs_dir):
            actions.append("telnet_enabled")
    if enable_ftp_flag:
        if enable_ftp(rootfs_dir):
            actions.append("ftp_enabled")
    return actions